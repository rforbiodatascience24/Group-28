---
title: "Microreport week 7"
author: "Group 29"
format:
  html:
    embed-resources: true
editor: visual
---

## Loading libraries

Loading libraries, please don't delete again

```{r}
#| eval: true
#| message: false
#| warning: false

library(tidyverse)
library(broom)
library(cowplot)
```

## Loading data

```{r}
biopsy <- read_csv("https://wilkelab.org/classes/SDS348/data_sets/biopsy.csv")
```

## Tidying data

```{r}
pca_fit <- biopsy |> 
  select(where(is.numeric)) |>  # retain only numeric columns
  prcomp(scale = TRUE) # do PCA on scaled data
```

## Visual data inspection

When performing PCA, we'll want to perform the following steps:

1.  Looking at the data in PC coordinates
2.  Looking at the rotation matrix
3.  Looking at the variance explained by each PC.

We'll start by

```{r}
pca_fit <- biopsy |> 
  select(where(is.numeric)) |>  # retain only numeric columns
  prcomp(scale = TRUE) # do PCA on scaled data
```

Now, we want to plot the data in PC coordinates. In general, this means combining the PC coordinates with the original dataset, so we can color points by categorical variables present in the original data but removed for the PCA. We do this with the `augment()` function from broom, which takes as arguments the fitted model and the original data. The columns containing the fitted coordinates are called `.fittedPC1`, `.fittedPC2`, etc.

```{r}
pca_fit |>
  augment(biopsy) |>  # add original dataset back in
  ggplot(aes(.fittedPC1, .fittedPC2, color = outcome)) + 
  geom_point(size = 1.5) +
  scale_color_manual(
    values = c(malignant = "#D55E00", benign = "#0072B2")
  ) +
  theme_half_open(12) + background_grid()
```

Next, we plot the rotation matrix. The rotation matrix is stored as pca_fit\$rotation, but here weâ€™ll extract it using the tidy() function from broom. When applied to prcomp objects, the tidy() function takes an additional argument matrix, which we set to matrix = "rotation" to extract the rotation matrix.

```{r}
# extract rotation matrix
pca_fit |> 
  tidy(matrix = "rotation")
```

Now in the context of a plot:

```{r}
# define arrow style for plotting
arrow_style <- arrow(
  angle = 20, ends = "first", type = "closed", length = grid::unit(8, "pt")
)

# plot rotation matrix
pca_fit |> 
  tidy(matrix = "rotation") |> 
  pivot_wider(names_from = "PC", names_prefix = "PC", values_from = "value") |> 
  ggplot(aes(PC1, PC2)) +
  geom_segment(xend = 0, yend = 0, arrow = arrow_style) +
  geom_text(
    aes(label = column),
    hjust = 1, nudge_x = -0.02, 
    color = "#904C2F"
  ) +
  xlim(-1.25, .5) + ylim(-.5, 1) +
  coord_fixed() + # fix aspect ratio to 1:1
  theme_minimal_grid(12)
```

## Variance explained

Uses function

```{r}
pca_fit |> 
  tidy(matrix = "eigenvalues")
```

The variance is plotted

```{r}
pca_fit |> 
  tidy(matrix = "eigenvalues") %>%
  ggplot(aes(PC, percent)) +
  geom_col(fill = "#56B4E9", alpha = 0.8) +
  scale_x_continuous(breaks = 1:9) +
  scale_y_continuous(
    labels = scales::percent_format(),
    expand = expansion(mult = c(0, 0.01))
  ) +
  theme_minimal_hgrid(12)
```
